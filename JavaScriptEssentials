JavaScript Essentials

Objective:
Create an interactive to-do list that allows users to add, remove, and mark tasks as completed.

Requirements:
- Use JavaScript to dynamically update the DOM.
- Implement event listeners for adding and removing tasks.
- Use `classList` to toggle task completion (e.g., strikethrough completed tasks).
- Follow best practices for minimizing DOM access and avoiding inline JavaScript.

Use Case:
- Users can manage their daily tasks in a simple, interactive web application.
- The project demonstrates how JavaScript can be used to create dynamic, user-friendly interfaces.

Performance:
- The to-do list should respond quickly to user interactions.
- The code should be efficient, with minimal unnecessary DOM access.
- The UI should update dynamically without requiring a page reload.


JavaScript Essentials:
   - Understand and use variables, data types, and operators.
   - Write functions, loops, and conditional statements.
   - Work with arrays and objects.

2. DOM Manipulation:
   - Select and modify HTML elements using JavaScript.
   - Add, remove, and toggle classes on elements.
   - Create and append new elements to the DOM.
   - Change element styles and attributes dynamically.

3. Event Handling:
   - Add event listeners to handle user interactions like clicks and key presses.
   - Use event delegation to manage dynamic content.
   - Remove event listeners when they are no longer needed.

4. Best Practices:
   - Minimize DOM access by storing references to frequently accessed elements.
   - Avoid inline JavaScript and use external or internal scripts.
   - Use `classList` for class manipulation.

Mini Project Steps:

1. Create a Simple Web Page:
   - Start with a basic HTML structure.
   - Include elements like buttons, headings, and containers that you can manipulate with JavaScript.

2. Add JavaScript Functionality:
   - Write functions to change the content and style of elements based on user interactions.
   - Use loops and conditional statements to handle dynamic content.

3. Implement Event Handling:
   - Add event listeners to buttons and other interactive elements.
   - Use event delegation to handle events for dynamically added elements.

4. Enhance with Advanced Features:
   - Use arrow functions, destructuring, and template literals where applicable.
   - Implement features like adding and removing elements dynamically.

Mini Project Idea:

Interactive To-Do List:

- HTML Structure:
html
  <div class="container">
      <h1>To-Do List</h1>
      <input type="text" id="taskInput" placeholder="Enter a new task">
      <button id="addTaskBtn">Add Task</button>
      <ul id="taskList"></ul>
  </div>
 

- JavaScript Functionality:
  javascript
  document.getElementById('addTaskBtn').addEventListener('click', () => {
      const taskInput = document.getElementById('taskInput');
      const taskList = document.getElementById('taskList');

      if (taskInput.value.trim() !== '') {
          const newTask = document.createElement('li');
          newTask.textContent = taskInput.value;
          taskList.appendChild(newTask);
          taskInput.value = '';
      }
  });

  document.getElementById('taskList').addEventListener('click', (event) => {
      if (event.target.tagName === 'LI') {
          event.target.classList.toggle('completed');
      }
  });
 

- CSS for Styling:
 css
  .completed {
      text-decoration: line-through;
      color: gray;
  }
